/* ======================================================================== *
 *  Module ............. WAM-ROS
 *  File ............... WamState.cpp
 *  Author ............. vw
 *  Creation Date ...... 12 Au 2009
 *                                                                          *
 *  **********************************************************************  *
 *                                                                          *
 *  This program publishes WAM state information to WamState topic via ROS
 *
 * ======================================================================== */

#include <iostream>
#include <sstream>
#include <string>

/* ROS dependencies */
#include "ros/ros.h"                 //All roscpp nodes will need this
#include "wam_ros/Joints.h"
#include "wam_ros/WamState.h"     //This is our autogenerated msg
#include "time.h"
#include "std_msgs/String.h"

/* WAM dependencies */
#include "../../../bindings/cpp/BtWam.hpp" 		//file location: libbarrett/bindings/cpp/BtWam.hpp

void getState(wam_ros::WamState * out, Wam * wam);


int main(int argc, char **argv)
{
	/* Initializes ROS system. wam is name of node */
	ros::init(argc, argv, "wam");

	/* NodeHandle is the main access point to communications with the ROS system.
	*  The first NodeHandle constructed will fully initialize this node, and the last
	*  NodeHandle destructed will close down the node.   */
	ros::NodeHandle n;

	/* Advertise under wam_jpos and wam_state topics.   */
	ros::Publisher jposPub = n.advertise<wam_ros::Joints>("wam_jpos", 1000);
	ros::Publisher statePub = n.advertise<wam_ros::WamState>("wam_state", 1000);
	
	/* Set loop frequency to 10Hz */
	ros::Rate loop_rate(10);

	/* Initialize WAM object */
	char name[10] = "wam7";
	Wam wam(name);
	wam.init();

	while (n.ok())
	{
		/* This is a Joints message object. You stuff it with data, and then publish it.     */
		wam_ros::Joints msg;
		msg.j = wam.getJointPosition();
		ROS_INFO_STREAM("sending joints " << msg.j );
		jposPub.publish(msg);


		/* Do same with WamState message object */
		wam_ros::WamState out;
		getState(&out, &wam);
		statePub.publish(out);
		
		ROS_INFO_STREAM("sending WAM state " );

		/* Not needed yet because not subscribing but added for good measure */
		ros::spinOnce();

		/* Sleep to ensure correct loop time */
		loop_rate.sleep();
	}


	return 0;
}


void getState(wam_ros::WamState * out, Wam * wam)
{
	out->jpos = wam->getJointPosition();
	out->jvel = wam->getJointVelocity();
	out->jtor = wam->getJointTorque();

	out->cpos = wam->getCartesianPosition();
	out->crot[0] = wam->getCartesianRotationRow1();
	out->crot[1] = wam->getCartesianRotationRow2();
	out->crot[2] = wam->getCartesianRotationRow3();

	out->ctrl = wam->getCurrentControllerName();
	out->space = wam->getCurrentControllerSpace();
	out->pos = wam->conPosition();

	out->gcomp = wam->isGravityCompensation();
	out->holding = wam->isHolding();
	out->teaching = wam->isTeaching();
	out->loadedRefgen = wam->refgenLoadedName();
	out->activeRefgen = wam->refgenActiveName();
	out->moveIsDone = wam->moveIsDone();
}

