/* ======================================================================== *
 *  Module ............. WAM-ROS
 *  File ............... WamJpos.cpp
 *  Author ............. vw
 *  Creation Date ...... 30 July 2009
 *                                                                          *
 *  **********************************************************************  *
 *                                                                          *
 *  This program demonstrates simple sending of messages over the ROS system 
 *  integrated withlibbt.
 *
 * ======================================================================== */

#include <iostream>
#include <sstream>
#include <string>

/* ROS dependencies */
#include "ros/ros.h"                 //All roscpp nodes will need this
//#include "wam_ros/Joints.h"     //This is our autogenerated msg
#include "time.h"
#include "std_msgs/String.h"

/* WAM dependencies */
#include "../../../bindings/cpp/BtWam.hpp"


int main(int argc, char **argv)
{
	/* Initializes ROS system. wam is name of node */
	ros::init(argc, argv, "wam");

	/* NodeHandle is the main access point to communications with the ROS system.
	*  The first NodeHandle constructed will fully initialize this node, and the last
	*  NodeHandle destructed will close down the node.   */
	ros::NodeHandle n;

	/* Advertise under wam_jpos topic.   */
	ros::Publisher pub = n.advertise<std_msgs::String>("wam_jpos", 1000);

	/* Set loop frequency to 10Hz */
	ros::Rate loop_rate(10);

	/* Initialize WAM object */
	char name[10] = "wam7";
	Wam wam(name);
	wam.init();

	while (n.ok())
	{
		/* This is a message object. You stuff it with data, and then publish it.     */
		std_msgs::String msg;

		std::stringstream ss;
		ss << wam.getJointPosition();
		ROS_INFO("%s", ss.str().c_str());
		msg.data = ss.str();

		/* Publishes data to wam_jpos topic.     */
		pub.publish(msg);

		/* Not needed yet because not subscribing but added for good measure */
		ros::spinOnce();

		/* Sleep to ensure correct loop time */
		loop_rate.sleep();
	}


	return 0;
}
